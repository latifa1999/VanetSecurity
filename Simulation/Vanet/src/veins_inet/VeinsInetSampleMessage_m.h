//
// Generated file, do not edit! Created by nedtool 5.6 from veins_inet/VeinsInetSampleMessage.msg.
//

#ifndef __VEINSINETSAMPLEMESSAGE_M_H
#define __VEINSINETSAMPLEMESSAGE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



class VeinsInetSampleMessage;
#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk

/**
 * Class generated from <tt>veins_inet/VeinsInetSampleMessage.msg:34</tt> by nedtool.
 * <pre>
 * //
 * // Example message definition
 * //
 * class VeinsInetSampleMessage extends inet::FieldsChunk
 * {
 *     string senderId;   // Sender ID
 *     double posx;       // X position
 *     double posy;       // Y position
 *     double spdx;       // X speed
 *     double spdy;       // Y speed
 *     double aclx;       // X acceleration
 *     double acly;       // Y acceleration
 *     double hedx;       // X heading
 *     double hedy;       // Y heading
 *     bool malicious = false;
 *     string attackType;
 * }
 * </pre>
 */
class VeinsInetSampleMessage : public ::inet::FieldsChunk
{
  protected:
    omnetpp::opp_string senderId;
    double posx = 0;
    double posy = 0;
    double spdx = 0;
    double spdy = 0;
    double aclx = 0;
    double acly = 0;
    double hedx = 0;
    double hedy = 0;
    bool malicious = false;
    omnetpp::opp_string attackType;

  private:
    void copy(const VeinsInetSampleMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const VeinsInetSampleMessage&);

  public:
    VeinsInetSampleMessage();
    VeinsInetSampleMessage(const VeinsInetSampleMessage& other);
    virtual ~VeinsInetSampleMessage();
    VeinsInetSampleMessage& operator=(const VeinsInetSampleMessage& other);
    virtual VeinsInetSampleMessage *dup() const override {return new VeinsInetSampleMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual const char * getSenderId() const;
    virtual void setSenderId(const char * senderId);
    virtual double getPosx() const;
    virtual void setPosx(double posx);
    virtual double getPosy() const;
    virtual void setPosy(double posy);
    virtual double getSpdx() const;
    virtual void setSpdx(double spdx);
    virtual double getSpdy() const;
    virtual void setSpdy(double spdy);
    virtual double getAclx() const;
    virtual void setAclx(double aclx);
    virtual double getAcly() const;
    virtual void setAcly(double acly);
    virtual double getHedx() const;
    virtual void setHedx(double hedx);
    virtual double getHedy() const;
    virtual void setHedy(double hedy);
    virtual bool getMalicious() const;
    virtual void setMalicious(bool malicious);
    virtual const char * getAttackType() const;
    virtual void setAttackType(const char * attackType);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const VeinsInetSampleMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, VeinsInetSampleMessage& obj) {obj.parsimUnpack(b);}

#endif // ifndef __VEINSINETSAMPLEMESSAGE_M_H

